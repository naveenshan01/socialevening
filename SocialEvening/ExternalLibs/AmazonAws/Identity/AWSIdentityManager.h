//
//  AWSIdentityManager.h
//
//
// Copyright 2015 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//

#import <UIKit/UIKit.h>

FOUNDATION_EXPORT NSString *const AWSIdentityManagerDidSignInNotification;
FOUNDATION_EXPORT NSString *const AWSIdentityManagerDidSignOutNotification;

/**
 * User Sign-in providers.
 *
 * Note that even when User Sign-in is not enabled in the project, the Guest provider
 * type is used.
 */
typedef NS_ENUM(NSInteger, AWSSignInProviderType) {
    AWSSignInProviderTypeGuest,
    AWSSignInProviderTypeFacebook,
};

@interface AWSIdentityManager : NSObject

/**
 * Indicates whether the user is signed-in or not.
 * @return true if user is signed-in
 */
@property (readonly, getter=isLoggedIn) BOOL loggedIn;

/**
 * URL for the user's image, if user is signed-in with a third party identity provider,
 * like Facebook or Google.
 * @return url of image file, if user is signed-in
 */
@property (readonly) NSURL *imageURL;

/**
 * User name acquired from third party identity provider, such as Facebook or Google.
 * @return user name, if user is signed-in
 */
@property (readonly) NSString *userName;

/**
 * Amazon Cognito User Identity ID. This uniquely identifies the user, regardless of
 * whether or not the user is signed-in, if User Sign-in is enabled in the project.
 * @return unique user identifier
 */
@property (readonly) NSString *identityId;

/**
 * Signs the user out of whatever third party identity provider they used to sign in.
 * @param completionHandler used to callback application with async operation results
 */
- (void)logoutWithCompletionHandler:(void (^)(id result, NSError *error))completionHandler;

/**
 * Signs the user in with an identity provider. Note that even if User Sign-in is not
 * enabled in the project, the user is still signed-in with the Guest type provider.
 * @param signInProviderType provider type
 * @param completionHandler used to callback application with async operation results
 */
- (void)loginWithSignInProvider:(AWSSignInProviderType)signInProviderType
              completionHandler:(void (^)(id result, NSError *error))completionHandler;

/**
 * Attempts to resume session with the previous sign-in provider.
 * @param completionHandler used to callback application with async operation results
 */
- (void)resumeSessionWithCompletionHandler:(void (^)(id result, NSError *error))completionHandler;

/**
 * Gets the shared singleton instance of this class.
 * @return instance
 */
+ (instancetype)sharedInstance;

/**
 * Passes parameters used to launch the application to the current identity provider. For some
 * third party providers, this completes the User Sign-in call flow, which used a browser to
 * get information from the user, directly.
 * @param application application
 * @param launchOptions options used to launch the application
 * @return true if this call handled the operation
 */
- (BOOL)application:(UIApplication *)application
didFinishLaunchingWithOptions:(NSDictionary *)launchOptions;

/**
 * Passes parameters used to launch the application to the current identity provider. For some
 * third party providers, this completes the User Sign-in call flow, which used a browser to
 * get information from the user, directly.
 * @param application application
 * @param url url used to open the application
 * @param sourceApplication source application
 * @param annotation annotation
 * @return true if this call handled the operation
 */
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation;

@end
