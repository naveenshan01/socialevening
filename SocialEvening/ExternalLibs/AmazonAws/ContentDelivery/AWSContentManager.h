//
//  AWSContentManager.h
//
//
// Copyright 2015 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//

#import <Foundation/Foundation.h>

@class AWSS3GetObjectOutput;

/**
 *  The error domain for `AWSContentManager`.
 */
FOUNDATION_EXPORT NSString *const AWSContentManagerErrorDomain;

/**
 *  The error codes for `AWSContentManager`.
 */
typedef NS_ENUM(NSInteger, AWSContentManagerErrorType){
    /**
     *  Generic error.
     */
    AWSContentManagerErrorTypeUnknown,
    /**
     *  Initiated a transfer on a content that is already running.
     */
    AWSContentManagerErrorTypeTransferAlreadyInProgress,
    /**
     *  Initiated a transfer on a directory. Directories cannot be downloaded.
     */
    AWSContentManagerErrorTypeDirectoryCannotBeDownloaded,
    /**
     *  A server returned a client exception (e.g. HTTP status code 4xx).
     */
    AWSContentManagerErrorTypeClientException,
    /**
     *  A server returned a service exception (e.g. HTTP status code 5xx).
     */
    AWSContentManagerErrorTypeServiceException,
};

@class AWSContent;

/**
 * The Content Manager manages caching and transfer of files from Amazon S3 and/or 
 * Amazon CloudFront. It lists files directly using S3, regardless of whether 
 * Amazon CloudFront is in use. It maintains a size-limited cache for files stored
 * on the local device and provides operations to set the cache size limit and
 * clear files from the local cache. It serves as the application's interface into
 * the Content Delivery feature. Content Manager instances are also used internally
 * for the User Files feature.
 */
@interface AWSContentManager : NSObject

/**
 * Local cache size limit in bytes.
 */
@property (nonatomic, assign) NSUInteger maxCacheSize;

/**
 * Local cache bytes used.
 */
@property (nonatomic, readonly) NSUInteger cachedUsedSize;

/**
 * Number of bytes pinned in the cache. Pinned items do not count towards the
 * cache size limit.
 */
@property (nonatomic, readonly) NSUInteger pinnedSize;

- (void)getContentWithKey:(NSString *)key
        completionHandler:(void (^)(AWSS3GetObjectOutput *result, NSError *error))completionHandler;

/**
 *  Loads the list of available files in the Amazon S3 bucket under the folder specified by the prefix parameter. Results are paged with page size of 100 files. The marker parameter value returned from a call should be passed to a subsequent call, in order to page through the list of files.
 *
 *  @param prefix            Limits the response to keys that begin with the specified prefix.
 *  @param marker            The key to start with when listing objects in a bucket. It loads object metadata from the S3 bucket in alphabetical order, starting with the key after the marker in order.
 *  @param completionHandler The completion handler that returns the results and error.
 */
- (void)listAvailableContentsWithPrefix:(NSString *)prefix
                                 marker:(NSString *)marker
                      completionHandler:(void (^)(NSArray *contents, NSString *marker, NSError *error))completionHandler;

/**
 *  Returns a list of contents that fit in the available cache. The list is sorted by last modified date on the S3 bucket, the most recently modified one first.
 *
 *  @param prefix            Limits the response to keys that begin with the specified prefix.
 *  @param completionHandler The completion handler that returns the result and error.
 */
- (void)listRecentContentsWithPrefix:(NSString *)prefix
                   completionHandler:(void (^)(id result, NSError *error))completionHandler;

/**
 *  Removes all cached contents. It does not modify the remote objects.
 */
- (void)clearCache;

/**
 *  Returns an instance of `AWSContent` for a given key. You can use this method to download content without first load its metadata using `- loadContentMetadataWithPrefix:marker:completionHandler:`.
 *
 *  @param key The key of the content.
 *
 *  @return An instance of `AWSContent`.
 */
- (AWSContent *)contentWithKey:(NSString *)key;

@end

/**
 *  Status of content item download.
 */
typedef NS_ENUM(NSInteger, AWSContentStatusType){
    /**
     *  Unknown status. This should not happen.
     */
    AWSContentStatusTypeUnknown,
    /**
     *  Has been created but has not started running yet.
     */
    AWSContentStatusTypeNotStarted,
    /**
     *  Is running and transferring data from/to the remote server.
     */
    AWSContentStatusTypeRunning,
    /**
     *  Has completed transferring data from/to the remote server.
     */
    AWSContentStatusTypeCompleted,
    /**
     *  Has failed to transfer data from/to the remote server.
     */
    AWSContentStatusTypeFailed,
};

/**
 *  Policy to use when downloading a file.
 */
typedef NS_ENUM(NSInteger, AWSContentDownloadType){
    /**
     *  Downalods a file if not cached locally.
     */
    AWSContentDownloadTypeIfNotCached,
    /**
     *  Downloads a file if not cached locally or the remote version is newer than the locally cached version.
     */
    AWSContentDownloadTypeIfNewerExists,
    /**
     *  Downloads a file and overwrite it if the local cache exists.
     */
    AWSContentDownloadTypeAlways,
};

/**
 *  The content object that holds the cached data and its metadata.
 */
@interface AWSContent : NSObject

/**
 *  The Amazon S3 key associated with the content.
 */
@property (nonatomic, readonly) NSString *key;

/**
 *  Shows if the content is a directory.
 */
@property (nonatomic, readonly, getter=isDirectory) BOOL directory;

/**
 *  The status of the content.
 */
@property (nonatomic, readonly) AWSContentStatusType status;

/**
 *  The transfer progress.
 */
@property (nonatomic, readonly) NSProgress *progress;

/**
 *  The last known size reported by the Amazon S3. May be different from the actual size if the file was modified on the server.
 */
@property (nonatomic, readonly) NSUInteger knownRemoteByteCount;

/**
 *  The last known last modified date reported by the Amazon S3. May be different from the actual last modified date if the file was modified on the server.
 */
@property (nonatomic, readonly) NSDate *knownRemoteLastModifiedDate;

/**
 *  The cached data object.
 */
@property (nonatomic, readonly) NSData *cachedData;

/**
 *  The cached data size.
 */
@property (nonatomic, readonly) NSUInteger fileSize;

/**
 *  The date the cached data was downloaded.
 */
@property (nonatomic, readonly) NSDate *downloadedDate;

/**
 *  Wheather the content is locally cached.
 */
@property (nonatomic, readonly, getter=isCached) BOOL cached;

/**
 *  Weather the content is pinned. Pinned objects are not subject to the content cache limit.
 */
@property (nonatomic, readonly, getter=isPinned) BOOL pinned;

/**
 *  Downloads a file from the remote server.
 *
 *  @param loadingType       Specifies the loading behavior for downloading data.
 *  @param pinOnCompletion   When set to `YES`, it pins the content on completion. You can download a content that does not fit in the content cache by setting it to `YES`.
 *  @param progressBlock     The progress feedback block.
 *  @param completionHandler The completion handler block.
 */
- (void)downloadWithDownloadType:(AWSContentDownloadType)loadingType
                 pinOnCompletion:(BOOL)pinOnCompletion
                   progressBlock:(void(^)(AWSContent *content, NSProgress *progress))progressBlock
               completionHandler:(void(^)(AWSContent *content, NSData *data, NSError *error))completionHandler;

/**
 *  Pins the locally cached object. Pinned objects are not subject to the content cache limit.
 */
- (void)pin;

/**
 *  Unpins the pinned object. It may purge the content cache if the content cache does not have enough available space to fit the unpinned data.
 */
- (void)unPin;

/**
 *  Removes locally cached data regardless of the pinning status.
 */
- (void)removeLocal;

@end
